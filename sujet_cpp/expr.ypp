%{
#include <cstdio>
#include <iostream>
using namespace std;

#include "expr.hpp"

// stuff from flex that bison needs to know about:
extern "C" int yylex();

void yyerror(const char *s);

Expr *res = NULL;
%}

// Bison fundamentally works by asking flex to get the next token, which it
// returns as an object of type "yystype".  But tokens could be of any
// arbitrary data type!  So we deal with that in Bison by defining a C union
// holding each of the types of tokens that Flex could return, and have Bison
// use that union instead of "int" for the definition of "yystype":
%union {
    int ival;
    class Expr *exp;
}

%start input

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token TK_PLUS TK_MULT 
%token TK_LPAREN TK_RPAREN
%token <ival> TK_INT
%type <exp> expression

%left TK_PLUS 
%left TK_MULT

%%
// this is the actual grammar that bison will parse, but for right now it's just
// something silly to echo to the screen what bison gets from flex.  We'll
// make a real one shortly:

input: expression  { res = $1; }
     ;

expression:
      TK_INT                                    { $$ = new EConst($1);                       }
    | TK_LPAREN expression TK_RPAREN            { $$ = $2;                                      }
    | expression TK_PLUS expression             { $$ = new EAdd($1, $3);                }
    | expression TK_MULT expression             { $$ = new EMul($1, $3);                }
    ;
%%
