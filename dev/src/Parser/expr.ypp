%{
#include <cstdio>
#include <iostream>
using namespace std;

#include "expr.hpp"

// stuff from flex that bison needs to know about:
extern "C" int yylex();

void yyerror(const char *s);

Expr *res = NULL;
%}

// Bison fundamentally works by asking flex to get the next token, which it
// returns as an object of type "yystype".  But tokens could be of any
// arbitrary data type!  So we deal with that in Bison by defining a C union
// holding each of the types of tokens that Flex could return, and have Bison
// use that union instead of "int" for the definition of "yystype":
%union {
    int ival;
    char *name;
    class Expr *exp;
}

%start input

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token TK_DIS TK_CON TK_XOR TK_IMP TK_EQU TK_ANT TK_NEG
%token TK_EQUA TK_NEQUA TK_LTH TK_GTH TK_LEQ TK_GEQ
%token TK_LPAREN TK_RPAREN TK_COMMA
%token TK_ZERO
%token <name> TK_FUN
%token <ival> TK_VAR
%token <name> TK_LOVAR
%type <exp> expression
%type <exp> args
%type <exp> term

%left TK_EQU
%left TK_IMP
%left TK_XOR
%left TK_DIS
%left TK_CON
%left TK_EQUA TK_NEQUA TK_LTH TK_GTH TK_LEQ TK_GEQ
%left TK_ANT TK_NEG
%left TK_FUN
%left TK_COMMA

%%
// this is the actual grammar that bison will parse, but for right now it's just
// something silly to echo to the screen what bison gets from flex.  We'll
// make a real one shortly:

input: expression TK_ZERO { res = $1; }
     ;

args:
      term
    | args TK_COMMA term                                {$$ = new EArg($1, $3);}
    ;

term:
      TK_VAR                                            {$$ = new EVar($1);}
    | TK_FUN TK_LPAREN args TK_RPAREN                   {$$ = new EFun($1, $3);} 
    | TK_FUN                                            {$$ = new ECst($1);}
    ; 
                          
expression:
      TK_VAR                                            {$$ = new EVar($1);}
    | TK_LOVAR                                          {$$ = new ELoVar($1);}
    | TK_FUN TK_LPAREN expression TK_RPAREN             {$$ = new EFun($1, $3);}
    | expression TK_COMMA expression                    {$$ = new EArg($1, $3);}
    | TK_LPAREN expression TK_RPAREN                    {$$ = $2;}
    | term TK_EQUA term                                 {$$ = new EEqua($1, $3);}
    | term TK_NEQUA term                                {$$ = new ENEqua($1, $3);}
    | expression TK_EQU expression                      {$$ = new EEqu($1, $3);}
    | expression TK_IMP expression                      {$$ = new EImp($1, $3);}
    | expression TK_XOR expression                      {$$ = new EXor($1, $3);}
    | expression TK_DIS expression                      {$$ = new EDis($1, $3);}
    | expression TK_CON expression                      {$$ = new ECon($1, $3);}
    | TK_ANT expression                                 {$$ = new EAnt($2);}
    | TK_NEG expression                                 {$$ = new ENeg($2);}
    | expression TK_NEG expression TK_LTH expression    {$$ = new ELth($1, $3, $5);}
    | expression TK_NEG expression TK_GTH expression    {$$ = new EGth($1, $3, $5);}
    | expression TK_NEG expression TK_LEQ expression    {$$ = new ELeq($1, $3, $5);}
    | expression TK_NEG expression TK_GEQ expression    {$$ = new EGeq($1, $3, $5);}
    | expression TK_NEG expression TK_EQUA expression   {$$ = new ELoEq($1, $3, $5);}
    | expression TK_NEG expression TK_NEQUA expression  {$$ = new ELoNeq($1, $3, $5);}
    | expression TK_LTH expression                      {$$ = new ELth($1, $3);}
    | expression TK_GTH expression                      {$$ = new EGth($1, $3);}
    | expression TK_LEQ expression                      {$$ = new ELeq($1, $3);}
    | expression TK_GEQ expression                      {$$ = new EGeq($1, $3);}
    | expression TK_EQUA expression                     {$$ = new ELoEq($1, $3);}
    | expression TK_NEQUA expression                    {$$ = new ELoNeq($1, $3);}
    ;
%%
